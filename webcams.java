package webcam;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.videoio.VideoCapture;

/**
 *
 * @author sony
 */
public class webcams extends javax.swing.JPanel {

  BufferedImage image;
    
    public webcams() {
        initComponents();
    }
    public webcams(BufferedImage image) {
        this.image=image;
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public static void main(String args[]) throws InterruptedException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(webcam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(webcam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(webcam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(webcam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new webcams().setVisible(true);
            }
        });
        
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        
        webcams t=new webcams();
        VideoCapture camera=new VideoCapture(0);
        
        Mat frame=new Mat();
        
        camera.read(frame);
        Thread.sleep(4000);
        if(!camera.isOpened()){
            System.out.println("Error");
        }
        else
        {
            
            while(true)
            {
                if(camera.read(frame))
                {
                    
                    BufferedImage image=t.MatToBufferedImage(frame);
                    t.window(image,"Original Image",0,0);
                    t.window(t.grayscale(image),"Processed Image",40,60);
                    t.saveImage(image);
                    //t.window(t.loadImage("image"),"Image loaded",200,200);
                    break;
                }
            }
        }
        camera.release();
    }
    
    public void paint(Graphics g)
    {
        g.drawImage(image, 0, 0, this);
    }
    
    //show image on window
    public void window(BufferedImage img,String text,int x,int y)
    {
        
        JFrame frame0=new JFrame();
        frame0.getContentPane().add(new webcams(img));
        frame0.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame0.setTitle(text);
        frame0.setSize(img.getWidth(),img.getHeight()+30);
        frame0.setLocation(x,y);
        frame0.setVisible(true);
    }
    
    //Load an Image
    public BufferedImage loadImage(String file)
    {
        BufferedImage img;
        try{
            File input =new File(file);
            img=ImageIO.read(input);
            return img;
        }
        catch(Exception e){
            System.out.println("error");
        }
        return null;
    }
    
    //save an image
    public void saveImage(BufferedImage img)
    {
        Date date=new Date();
        String name="new"+date.getTime()+".jpg";
       
         try {
            int w = img.getWidth(null);
            int h = img.getHeight(null);
            BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = bi.createGraphics();
 
            g2.drawImage(img, 0, 0, null);
 
            g2.dispose();
 
            String fileType = name.substring(name.indexOf('.') + 1);
            
            File fi=new File(name);
            
            ImageIO.write(bi, fileType, fi);
           
           
            
        } catch (Exception e) {
        }
    }
    
    //grayscale filter
    public BufferedImage grayscale(BufferedImage img)
    {
        for(int i=0;i<img.getHeight();i++)
        {
            for(int j=0;j<img.getWidth();j++)
            {
                Color c=new Color(img.getRGB(j,i));
                
                int red=(int) (c.getRed()*0.299);
                int green=(int) (c.getGreen()*0.587);
                int blue=(int) (c.getBlue()*0.114);
                
                Color newColor=new Color(red+green+blue,red+green+blue,red+green+blue);
                
                img.setRGB(j, i, newColor.getRGB());
            }
        }
        return img;
    }
    
    public BufferedImage MatToBufferedImage(Mat frame)
    {
        //Mat() to BufferedImage

        int type=0;
        if(frame.channels()==1)

        {
            type=BufferedImage.TYPE_BYTE_GRAY;
            
        }
        else
        {
            if(frame.channels()==3)
            {
                type=BufferedImage.TYPE_3BYTE_BGR;
            }
        }
        BufferedImage image=new BufferedImage(frame.width(),frame.height(),type);
        WritableRaster raster=image.getRaster();
        DataBufferByte dataBuffer=(DataBufferByte)raster.getDataBuffer();
        byte[] data=dataBuffer.getData();
        frame.get(0,0,data);
        return image;
                
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
